@model IEnumerable<SelectListItem>
@{
    var model = Model ?? new SelectListItem[] { };

    var name = ViewData.ModelMetadata.AdditionalValues.ContainsKey("DropDownProperty.PropertyName")
        ? ViewData.ModelMetadata.AdditionalValues["DropDownProperty.PropertyName"].ToString()
        : string.Empty;

    if (!string.IsNullOrWhiteSpace(name))
    {
        ViewData.TemplateInfo.HtmlFieldPrefix = string.Empty;
    }

    var attrs = new Dictionary<string, object>();

    var prompt = !string.IsNullOrWhiteSpace(ViewData.ModelMetadata.Watermark)
        ? ViewData.ModelMetadata.Watermark : "<< Seleccione >>";

    attrs.Add("data-cascading-prompt", prompt);

    var parentPrompt = model.Any() ? prompt : "<< Seleccione Padre >>";    
    if (ViewData.ModelMetadata.AdditionalValues.ContainsKey("CascadingDropDownProperty.ParentPrompt") 
        && ViewData.ModelMetadata.AdditionalValues["CascadingDropDownProperty.ParentPrompt"] != null)
    {
        parentPrompt = ViewData.ModelMetadata.AdditionalValues["CascadingDropDownProperty.ParentPrompt"].ToString();
        attrs.Add("data-cascading-parent-prompt", ViewData.ModelMetadata.AdditionalValues["CascadingDropDownProperty.ParentPrompt"]);
    }
    
    
    if (ViewData.ModelMetadata.AdditionalValues.ContainsKey("CascadingDropDownProperty.ParentPropertyName"))
    {
        attrs.Add("data-cascading-parent", ViewData.ModelMetadata.AdditionalValues["CascadingDropDownProperty.ParentPropertyName"]);
    }

    if (ViewData.ModelMetadata.AdditionalValues.ContainsKey("CascadingDropDownProperty.ActionName"))
    {
        string url;
        if (ViewData.ModelMetadata.AdditionalValues.ContainsKey("CascadingDropDownProperty.AreaName"))
        {
            url = Url.Action(
                ViewData.ModelMetadata.AdditionalValues["CascadingDropDownProperty.ActionName"].ToString(),
                ViewData.ModelMetadata.AdditionalValues["CascadingDropDownProperty.ControllerName"].ToString(),
                new { Area = ViewData.ModelMetadata.AdditionalValues["CascadingDropDownProperty.AreaName"].ToString()});
        }
        else if (ViewData.ModelMetadata.AdditionalValues.ContainsKey("CascadingDropDownProperty.ControllerName"))
        {
            url = Url.Action(
                ViewData.ModelMetadata.AdditionalValues["CascadingDropDownProperty.ActionName"].ToString(),
                ViewData.ModelMetadata.AdditionalValues["CascadingDropDownProperty.ControllerName"].ToString());
        }
        else
        {
            url = Url.Action(
                ViewData.ModelMetadata.AdditionalValues["CascadingDropDownProperty.ActionName"].ToString());
        }
        attrs.Add("data-cascading-url", url);
    }

    if (ViewData.ModelMetadata.AdditionalValues.ContainsKey("CascadingDropDownProperty.ParameterName"))
    {
        attrs.Add("data-cascading-parameter", ViewData.ModelMetadata.AdditionalValues["CascadingDropDownProperty.ParameterName"]);
    }

    if (!model.Any())
    {
        attrs.Add("disabled", "disabled");
    }

    attrs.Add("class", "dropdown-cascading");
}
@Html.DropDownList(name, model, parentPrompt, attrs)
